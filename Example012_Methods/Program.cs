// Вид 1. Не принимают никаких аргументов и ничего не возвращают (Void-метод)

void Method1() // нет никаких аргументов
{
    Console.WriteLine("Автор Умаров А.Р."); // ничего не возвращает
}

// Method1(); // вызываем метод, не забываем скобки!





// Вид 2. Могут принимать какие-то аргументы и ничего не возвращают (Void-метод)

void Method2(string msg) // принимаются аргументы
{
    Console.WriteLine(msg); // указываем оператор и используем те аргументы, которые были приняты
}

// Method2(msg: "Текст сообщения"); // вызываем метод, в скобках указываем какое-то сообщение

// Ниже пример, когда аргументов больше одного
void Method21(string msg, int count) // принимаем аргументы, используем count, чтобы показывать на экране определенное количество сообщений
{
    int i = 0;
    while (i < count) // операция будет выполняться, пока значение i меньше значения count
    {
        Console.WriteLine(msg); // указываем оператор и используем те аргументы, которые были приняты
        i++;
    }
    
}

// Method21("Текст", 4); // вызываем метод, в скобках указываем сообщение, которое хотим увидеть и количество выполнения метода
// Method21(count: 4, msg: "Текст1"); // если при вызове метода мы именуем аргументы, не обязательно писать их по порядку



// Вид 3. не принимают никакие аргументы, но могут что-то возвращать. Например, могут генерировать псевдослучайные данные

int Method3() // нет никаких аргументов
{

    return DateTime.Now.Year; // возвращаем текущую дату, время и год
}

// int year = Method3(); //в левой части указываем идентификатор переменной и присваиваем ей значение, которое возвращает метод
// Console.WriteLine(year); // вызываем оператор для печати результата в консоли


// Вид 4. Принимают аргументы и что-то возвращают для дальнейшей работы

string Method4(int count, string text) // принимаем аргументы
{
    int i = 0;
    string result = String.Empty; // Изначально значение result - пустая строка

    while (i < count)
    {
        result = result + text;
        i++;
    }
    return result;
}

// string res = Method4(10, "qwerty"); // создаем нужную переменную, чтобы вызвать метод
// Console.WriteLine(res); // вызываем оператор для печати результата в консоли



// Вид 4. (ПРИМЕНЯЯ ЦИКЛ FOR) Принимают аргументы и что-то возвращают для дальнейшей работы

string Method41(int count, string text) // принимаем аргументы
{
    string result = String.Empty; // Изначально значение result - пустая строка
    
    for(int i = 0; i < count; i++) // все условия прописываем в цикле for
    {
        result = result + text;
    }
    return result;
}

// string res = Method41(10, "qwerty"); // создаем нужную переменную, чтобы вызвать метод
// Console.WriteLine(res); // вызываем оператор для печати результата в консоли



// Цикл в цикле. Вывод таблицы умножения на экран

for (int  i = 2; i <= 10; i++) // i = 2 (таблица умножения начинается с 2)
{
    for (int j = 2; j <= 10; j++) // определяем счетчик j
    {
        Console.WriteLine($"{i} х {j} = {i*j}"); // выводим результат в терминал, используя интеполяцию строк
    }
    Console.WriteLine(); // вставляет пустую строку после выполнения цикла и перед переходом к следующему i
}
