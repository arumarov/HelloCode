// Вид 1. Не принимают никаких аргументов и ничего не возвращают (Void-метод)

void Method1() // нет никаких аргументов
{
    Console.WriteLine("Автор Умаров А.Р."); // ничего не возвращает
}

// Method1(); // вызываем метод, не забываем скобки!





// Вид 2. Могут принимать какие-то аргументы и ничего не возвращают (Void-метод)

void Method2(string msg) // принимаются аргументы
{
    Console.WriteLine(msg); // указываем оператор и используем те аргументы, которые были приняты
}

// Method2(msg: "Текст сообщения"); // вызываем метод, в скобках указываем какое-то сообщение

// Ниже пример, когда аргументов больше одного
void Method21(string msg, int count) // принимаем аргументы, используем count, чтобы показывать на экране определенное количество сообщений
{
    int i = 0;
    while (i < count) // операция будет выполняться, пока значение i меньше значения count
    {
        Console.WriteLine(msg); // указываем оператор и используем те аргументы, которые были приняты
        i++;
    }
    
}

// Method21("Текст", 4); // вызываем метод, в скобках указываем сообщение, которое хотим увидеть и количество выполнения метода
// Method21(count: 4, msg: "Текст1"); // если при вызове метода мы именуем аргументы, не обязательно писать их по порядку



// Вид 3. не принимают никакие аргументы, но могут что-то возвращать. Например, могут генерировать псевдослучайные данные

int Method3() // нет никаких аргументов
{

    return DateTime.Now.Year; // возвращаем текущую дату, время и год
}

// int year = Method3(); //в левой части указываем идентификатор переменной и присваиваем ей значение, которое возвращает метод
// Console.WriteLine(year); // вызываем оператор для печати результата в консоли


// Вид 4. Принимают аргументы и что-то возвращают для дальнейшей работы

string Method4(int count, string text) // принимаем аргументы
{
    int i = 0;
    string result = String.Empty; // Изначально значение result - пустая строка

    while (i < count)
    {
        result = result + text;
        i++;
    }
    return result;
}

// string res = Method4(10, "qwerty"); // создаем нужную переменную, чтобы вызвать метод
// Console.WriteLine(res); // вызываем оператор для печати результата в консоли



// Вид 4. (ПРИМЕНЯЯ ЦИКЛ FOR) Принимают аргументы и что-то возвращают для дальнейшей работы

string Method41(int count, string text) // принимаем аргументы
{
    string result = String.Empty; // Изначально значение result - пустая строка
    
    for(int i = 0; i < count; i++) // все условия прописываем в цикле for
    {
        result = result + text;
    }
    return result;
}

// string res = Method41(10, "qwerty"); // создаем нужную переменную, чтобы вызвать метод
// Console.WriteLine(res); // вызываем оператор для печати результата в консоли



// Цикл в цикле. Вывод таблицы умножения на экран

// for (int  i = 2; i <= 10; i++) // i = 2 (таблица умножения начинается с 2)
// {
//     for (int j = 2; j <= 10; j++) // определяем счетчик j
//     {
//         Console.WriteLine($"{i} х {j} = {i*j}"); // выводим результат в терминал, используя интеполяцию строк
//     }
//     Console.WriteLine(); // вставляет пустую строку после выполнения цикла и перед переходом к следующему i
// }



// ЗАДАЧА 1. ПРОГРАММА ОБРАБОТКИ ТЕКСТА
// Дан текст. В тексте нужно все пробелы заменить черточками, 
// маленькие буквы "к" заменить большими "К", 
// а большие "С" заменить маленькими "с".

// Ясна ли задача?

string text = "Я думаю, - сказал князь, улыбаясь, - что, "
            + "ежели бы вас послали вместо нашего милого Винценгероде,"
            + "вы бы взяли приступом согласие прусского короля. "
            + "Вы так красноречивы. Вы дадите мне чаю?";

// string s = "qwerty"
//             012345  (номера элементов)
// s[3] //  r  (для получения конкретного символа нужно указать: идентификатор строки[номер элемента])

// Метод будет принимать строку и те символы, которые нужно будет менять (старый символ и тот, на который нужно заменить)
// В связи с этим можно сделать вывод о том, что это условно 4 вид методов
// Назовем его Replace

string replace(string text, char oldValue, char newValue)
{
    string result = String.Empty; // изначально значение result - пустая строка

    int length = text.Length; // получаем длину строки
    
    for (int i = 0; i < length; i++) // проходим от начала до конца строки
    {
        if(text[i] == oldValue) result = result + $"{newValue}"; // если текущий символ совпадает с тем, который мы хотим заменить, в результат попадает новое значение
        else result = result + $"{text[i]}"; // если совпадений не обнаружено, то в result добавляется текущий символ, который был
    }

    return result;
}

// string newText = replace(text, ' ', '|'); //получаем результат
// Console.WriteLine(newText); // выводим результат в терминал
// Console.WriteLine( ); // разделяем каждый вывод в терминал пустой строкой
// newText = replace(newText, 'к', 'К'); //в качестве аргумента передаем полученный ранее newText и опять получаем новый, заменив следующие символы
// Console.WriteLine(newText); // выводим результат в терминал
// Console.WriteLine( ); // разделяем каждый вывод в терминал пустой строкой
// newText = replace(newText, 'С', 'с'); //в качестве аргумента передаем полученный ранее newText и опять получаем новый, заменив следующие символы
// Console.WriteLine(newText); // выводим результат в терминал



// ЗАДАЧА 2. СОРТИРОВКА МЕТОДОМ ВЫБОРА. ВЫВОД МАССИВА НА ЭКРАН

int[] arr = { 1, 5, 4, 3, 2, 6, 7, 1, 1 }; // устанавливаем массив с именем arr

void PrintArray(int[] array) // создаем метод, в качестве аргумента приходит массив
{
    int count = array.Length; // устанавливаем счетчик, равный длине массива

    for (int i = 0; i < count; i++)
    {
        Console.Write($"{array[i]} "); // выводим в терминал элемент массива
    }
     Console.WriteLine(); // выводим в терминал пустую строку
}

void SelectionSort(int[] array) //создаем метод, который будет упорядочивать наш массив. Аргумент - массив
{
        for (int i = 0; i < array.Length - 1; i++)
    {
        int minPosition = i; // определяем позицию, на которую смотрим
        
        for (int j = i+1; j < array.Length; j++) // выполняем цикл внутри цикла
        {
            if(array[j] < array[minPosition]) minPosition = j; //если элемент j меньше minPosition, сохраняем позицию j
        }
        
        int temporary = array[i]; // Переменной temporary присваиваем значение позиции i
        array[i] = array[minPosition]; // Позиции i присваиваем значение MinPosition
        array[minPosition] = temporary; // Позиции MinPosition присваиваем значение temporary
    }
}

PrintArray(arr); // вызываем метод
SelectionSort(arr); // вызываем метод сортировки

PrintArray(arr); // вызываем метод